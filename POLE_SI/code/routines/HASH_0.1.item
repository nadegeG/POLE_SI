package routines;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import javax.xml.bind.DatatypeConverter;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;

import sun.misc.BASE64Encoder;


/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class HASH {

    private static byte[] encodedBytes;


    
    public static String toSHA1(byte[] convertme) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-1");
        }
        catch(NoSuchAlgorithmException e) {
            e.printStackTrace();
        } 
        //return new String(md.digest(convertme));
        return  byteArrayToHexString(md.digest(convertme));
       //return  String hashedVal = Base64.getEncoder().encodeToString(DigestUtils.sha1(stringValue.getBytes(Charset.forName("UTF-8"))));
    }
    
    public static String byteArrayToHexString(byte[] b) {
    	  String result = "";
    	  for (int i=0; i < b.length; i++) {
    	    result +=
    	          Integer.toString( ( b[i] & 0xff ) + 0x100, 16).substring( 1 );
    	  }
    	  return result;
    	}
    public static String base64(String convert) throws UnsupportedEncodingException{
    	

    	// arbitrary binary data specified as a byte array
    	byte[] binaryData = convert.getBytes("UTF-8");

    	// convert the binary data to the base64-encoded string
    	String encodedData = DatatypeConverter.printBase64Binary(binaryData);
    	// encodedData is now "c29tZSBhcmJpdHJhcnkgZGF0YQ=="

    	// convert the base64-encoded string back to a byte array
    	byte[] decodedData = DatatypeConverter.parseBase64Binary(encodedData);

    	return encodedData;
    	
    }
    public static String test(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException{
    	
    	MessageDigest md = MessageDigest.getInstance("SHA-1");
    	
    	byte[] bytes = text.getBytes(("UTF-8"));
    	md.update(bytes);
    	byte[] digest = md.digest();
    	String hash = (new BASE64Encoder()).encode(digest);
		return hash;
    	
    }
}

package routines;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.util.Date;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Divers {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    public static String nettoyer_chaine (String message) {
    	message = message.toLowerCase();
    	
    	 
    	 message = message.replaceAll("\\é", "e");
    	 message = message.replaceAll(" ","");
    	 message = message.replace('é','e');
    	 message = message.replace('è','e');
    	 message = message.replace('ê','e');
    	
    	 message = message.replace('à','a');
    	 message = message.replace('ü','u');
    	 message = message.replace('û','u');
    	 message = message.replaceAll("_","");
    	
    	 message = message.replaceAll("-","");
    	
    	 message = message.replaceAll("&","");
    	
    	 message = message.replace('ö','o');
    	 message = message.replace('ô','o');
    	 message = message.toUpperCase();
    	
		return message;
    }
    
    public static void importCSVviaRequeteWeb()
    {
    	try 
    	{
    		String urlConnexion="https://www.visium360-ssl1.fr/ConventionStage_AC/goimpB.asp" ;
    		//System.out.println(urlConnexion);
	        String source ="";
	        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("greppo.univ-evry.fr", 3128)); 
	        URL oracle = new URL(urlConnexion);
	        URLConnection yc = oracle.openConnection(proxy);
	        BufferedReader in = new BufferedReader(
	        new InputStreamReader(
	        yc.getInputStream()));
	        String inputLine;
	        
	        while ((inputLine = in.readLine()) != null)
	        source +=inputLine;
	        in.close();
	        System.out.println( source);
    		
    	}
    	catch (Exception e) 
    	{
    		System.out.println("Erreur importCSVviaRequeteWeb "+ e);
    	}
    }
    public static String nettoyage(String mot)
    {
    if (mot!= null)
    {
    String chaineOK = " azertyuiopqsdfghjklmwxcvbnAZERTYUIOPQSDFGHJKLMWXCVBN0123456789 " ;

    mot = mot.replaceAll("[ÀÁÂÃÄÅ]" , "A");
    mot = mot.replace("Ç", "C");
    mot = mot.replaceAll("[ÈÉÊË]" , "E");
    mot = mot.replaceAll("[ÌÍÎÏ]" , "I");
    mot = mot.replaceAll("[ÒÓÔÕÖ]" , "O");
    mot = mot.replaceAll("[ÙÚÛÜ]" , "U");
    mot = mot.replace("Ý", "Y");
    mot = mot.replaceAll("[àáâãäå]" , "a");
    mot = mot.replace("ç", "c");
    mot = mot.replaceAll("[èéêë]" , "e");
    mot = mot.replaceAll("[ìíîï]" , "i");
    mot = mot.replaceAll("[ðòóôõö]" , "o");
    mot = mot.replaceAll("[ùúûü]" , "u");
    mot = mot.replaceAll("[ýÿ]" , "y");
    mot = mot.replace("'", "");
    //mot = mot.replaceAll("[/_/'/-//]" , "KKKK");
    //mot = mot.replaceAll("" [_'-/]" ,  " " );
    /*
    for (int i=0; i<mot.length(); i++)
    {
    boolean trouve = true;
    for (int j=0; j<chaineOK.length(); j++)
    {
    if (mot.charAt(i) == chaineOK.charAt(j))trouve = false;
    }
    if (trouve) mot = mot.replace(mot.charAt(i), "_");
    }
		*/
    }
    return mot;
    }
}
